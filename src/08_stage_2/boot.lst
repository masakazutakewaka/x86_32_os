     1                                         BOOT_LOAD equ 0x7c00         ; where boot probram is loaded
     2                                  			 ORG BOOT_LOAD                ; tell assembla where this program is loaded
     3                                  
     4                                  
     5                                  ;*********************************************************
     6                                  ;               macro
     7                                  ;*********************************************************
     8                                  %include "../include/macro.s"
     1                              <1> %macro cdecl 1-*.nolist
     2                              <1>   %rep %0 -1 
     3                              <1> 	  push %{-1:-1}      ; last arg
     4                              <1> 		%rotate -1         ; rotate to right ->
     5                              <1> 	%endrep
     6                              <1> 	%rotate -1           ; return args to as it used be
     7                              <1> 
     8                              <1> 	call %1
     9                              <1> 
    10                              <1> 	%if 1 < %0
    11                              <1> 		add sp, (__BITS__ >> 3) * (%0 - 1)     ;dump stqck (16(2byte) or 32(4byte)) * (number of args)
    12                              <1> 	%endif
    13                              <1> %endmacro
     9                                  
    10                                  
    11                                  ;*********************************************************
    12                                  ;               entry point
    13                                  ;*********************************************************
    14                                  
    15                                  entry:
    16 00000000 EB58                           jmp ipl        ; Initial Program Loader;
    17                                  
    18                                       ; BPB(BIOS Parameter Block)
    19 00000002 90<rept>                		   times 90 - ($ - $$) db 0x90  ; 0x90 -> NOP
    20                                  
    21                                  ipl: ; IPL
    22 0000005A FA                             cli                     ; disable interruption
    23                                  
    24 0000005B B80000                  			 mov ax, 0x0000
    25 0000005E 8ED8                    			 mov ds, ax
    26 00000060 8EC0                    			 mov es, ax
    27 00000062 8ED0                    			 mov ss, ax
    28 00000064 BC007C                  			 mov sp, BOOT_LOAD
    29                                  
    30 00000067 FB                      			 sti                     ; enable inerruption
    31                                  
    32 00000068 8816[B800]                     mov [BOOT.DRIVE], dl    ; store boot drive
    33                                  
    34                                  
    35                                  ;*********************************************************
    36                                  ;               display string
    37                                  ;*********************************************************
    38 0000006C 68[9800]E8480083C4-            cdecl puts, .s0
    38 00000074 02                 
    39                                  
    40                                  
    41                                  ;*********************************************************
    42                                  ;               load next 512 bytes
    43                                  ;               Sector load: AH = 0x02, INT = 0x13
    44                                  ;*********************************************************
    45 00000075 B402                    				 mov ah, 0x02              ;
    46 00000077 B001                    				 mov al, 1                 ; 1 sector -> 4096 bits -> 512 bytes
    47 00000079 B90200                  				 mov cx, 0x0002            ; cylinder = 0, sector = 2
    48 0000007C B600                    				 mov dh, 0x00              ; head = 0
    49 0000007E 8A16[B800]              				 mov dl, [BOOT.DRIVE]      ; drive
    50                                  
    51 00000082 BB007E                  				 mov bx, 0x7C00 + 512      ; offset
    52 00000085 CD13                    				 int 0x13
    53                                  
    54 00000087 730C                    .10Q:    jnc .10E                  ; if(CF) - CF = BIOS(0x13, 0x02) success(0) or not(1)
    55 00000089 68[A500]E82B0083C4-     .10T:    cdecl puts, .e0
    55 00000091 02                 
    56 00000092 E84400                  				 call reboot
    57                                  .10E:
    58                                  
    59 00000095 E96801                  				 jmp stage_2
    60                                  
    61                                  
    62                                  ;*********************************************************
    63                                  ;               data
    64                                  ;*********************************************************
    65 00000098 426F6F74696E672E2E-     .s0    db "Booting...", 0x0A, 0x0D, 0    ; 0x0A = LF, 0x0D = CR
    65 000000A1 2E0A0D00           
    66 000000A5 4572726F723A736563-     .e0    db "Error:sector read", 0
    66 000000AE 746F72207265616400 
    67                                  
    68 000000B7 00                      ALIGN 2, db 0
    69                                  BOOT:                 ; info related to boot drive
    70 000000B8 0000                    .DRIVE: dw 0          ; drive number
    71                                  
    72                                  
    73                                  ;*********************************************************
    74                                  ;               modules
    75                                  ;*********************************************************
    76                                  %include "../modules/real/puts.s"
     1                              <1> ; void puts(str); str -> address of string. 0x00 is the end of a string
     2                              <1> 
     3                              <1> puts:
     4                              <1>     ; stackframe
     5                              <1> 											; 4 -> str
     6                              <1> 											; 2 -> IP
     7 000000BA 55                  <1> 			push bp         ; 0
     8 000000BB 89E5                <1> 			mov bp, sp
     9                              <1> 
    10                              <1> 		; store registers
    11 000000BD 50                  <1> 			push ax
    12 000000BE 53                  <1> 			push bx
    13 000000BF 56                  <1> 			push si
    14                              <1> 
    15                              <1> 		; get arg
    16 000000C0 8B7604              <1> 		  mov si, [bp + 4]
    17                              <1> 
    18                              <1>     ; start function
    19 000000C3 B40E                <1> 			mov ah, 0x0E            ; tele type 1 charactor output
    20 000000C5 BB0000              <1> 			mov bx, 0x0000          ; page number & color
    21                              <1> 
    22 000000C8 FC                  <1> 			cld                     ; DF = 0; increment address
    23                              <1> 
    24                              <1> .10L:
    25 000000C9 AC                  <1>       lodsb                  ; AL = [SI]; SI += 1(byte)
    26                              <1> 
    27 000000CA 3C00                <1>       cmp al, 0
    28 000000CC 7404                <1> 			je .10E
    29                              <1> 
    30 000000CE CD10                <1> 			int 0x10                ; video BIOS call
    31 000000D0 EBF7                <1> 			jmp .10L
    32                              <1> 
    33                              <1> .10E:
    34                              <1>     ; return regisgters
    35 000000D2 5E                  <1> 		  pop si
    36 000000D3 5B                  <1> 		  pop bx
    37 000000D4 58                  <1> 			pop ax
    38                              <1> 
    39                              <1> 		; discard stackframe
    40 000000D5 89EC                <1> 		  mov sp, bp
    41 000000D7 5D                  <1> 			pop bp
    42                              <1> 
    43 000000D8 C3                  <1> 			ret
    44                              <1> 
    45                              <1> 
    77                                  %include "../modules/real/reboot.s"
     1                              <1> reboot:
     2 000000D9 68[F500]E8DBFF83C4- <1>          cdecl puts, .s0
     2 000000E1 02                  <1>
     3                              <1> 
     4                              <1> 
     5                              <1> ;*********************************************************
     6                              <1> ;               wait for input
     7                              <1> ;*********************************************************
     8 000000E2 B410                <1> .10L:    mov ah, 0x10     ; input : AH = 0x10, INT 0x16 -> AL = input
     9 000000E4 CD16                <1>          int 0x16
    10                              <1> 
    11 000000E6 3C20                <1> 				 cmp al, ' '       ; ZF == 0;
    12 000000E8 75F8                <1> 				 jne .10L         ; while(!ZF);
    13                              <1> 
    14 000000EA 68[1301]E8CAFF83C4- <1> 				 cdecl puts, .s1
    14 000000F2 02                  <1>
    15                              <1> 
    16                              <1> 
    17                              <1> ;*********************************************************
    18                              <1> ;               reboot
    19                              <1> ;*********************************************************
    20 000000F3 CD19                <1> 				 int 0x19         ; BIOS(0x19) -> reboot
    21                              <1> 
    22 000000F5 0A0D50757368205350- <1> .s0 db 0x0A, 0x0D, "Push SPACE key to reboot...", 0
    22 000000FE 414345206B65792074- <1>
    22 00000107 6F207265626F6F742E- <1>
    22 00000110 2E2E00              <1>
    23 00000113 0A0D0A0D00          <1> .s1 db 0x0A, 0x0D, 0x0A, 0x0D, 0
    78                                  
    79                                  
    80                                  ;*********************************************************
    81                                  ;               boot flag(first 512 byte)
    82                                  ;*********************************************************
    83 00000118 00<rept>                       times 510 - ($ - $$) db 0x00
    84 000001FE 55AA                           db 0x55, 0xAA
    85                                  
    86                                  
    87                                  ;*********************************************************
    88                                  ;               2nd stage of boot job
    89                                  ;*********************************************************
    90 00000200 68[0B02]E8B4FE83C4-     stage_2: cdecl puts, .s0
    90 00000208 02                 
    91                                  
    92 00000209 EBFE                             jmp $              ; end of procedure
    93                                  
    94 0000020B 326E64205374616765-     .s0 db "2nd Stage..", 0x0A, 0x0D, 0
    94 00000214 2E2E0A0D00         
    95                                  
    96                                  
    97                                  ;*********************************************************
    98                                  ;               padding to make this program 8,000 bytes
    99                                  ;*********************************************************
   100 00000219 00<rept>                         times (1024 * 8) - ($ - $$) db 0
