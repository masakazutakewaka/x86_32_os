     1                                  ; segment is 0x0000 throught out the program. DS == ES == 0
     2                                  
     3                                  ;*********************************************************
     4                                  ;               macro
     5                                  ;*********************************************************
     6                                  %include "../include/define.s"
     1                              <1> BOOT_LOAD equ 0x07C00                  ; load address of boot program
     2                              <1> BOOT_SIZE equ (1024 * 8)              ; size of boot code(byte)
     3                              <1> SECT_SIZE equ (512)                   ; size of sector; 1 sector = 512bytes = 4096bits
     4                              <1> BOOT_SECT equ (BOOT_SIZE / SECT_SIZE) ; number of sectors for boot program
     7                                  %include "../include/macro.s"
     1                              <1> %macro cdecl 1-*.nolist
     2                              <1>   %rep %0 -1 
     3                              <1> 	  push %{-1:-1}      ; last arg
     4                              <1> 		%rotate -1         ; rotate to right ->
     5                              <1> 	%endrep
     6                              <1> 	%rotate -1           ; return args to as it used be
     7                              <1> 
     8                              <1> 	call %1
     9                              <1> 
    10                              <1> 	%if 1 < %0
    11                              <1> 		add sp, (__BITS__ >> 3) * (%0 - 1)     ;dump stqck (16(2byte) or 32(4byte)) * (number of args)
    12                              <1> 	%endif
    13                              <1> %endmacro
    14                              <1> 
    15                              <1> 
    16                              <1> struc drive
    17 00000000 <res 00000002>      <1>      .no     resw   1   ; drive number
    18 00000002 <res 00000002>      <1>      .cyln   resw   1   ; cylinder
    19 00000004 <res 00000002>      <1>      .head   resw   1   ; head
    20 00000006 <res 00000002>      <1>      .sect   resw   1   ; sector
    21                              <1> endstruc
     8                                  
     9                                  			 ORG BOOT_LOAD                ; tell assembla where this program is loaded
    10                                  
    11                                  ;*********************************************************
    12                                  ;               entry point
    13                                  ;*********************************************************
    14                                  
    15                                  entry:
    16 00000000 EB58                           jmp ipl        ; Initial Program Loader;
    17                                  
    18                                       ; BPB(BIOS Parameter Block)
    19 00000002 90<rept>                		   times 90 - ($ - $$) db 0x90  ; 0x90 -> NOP
    20                                  
    21                                  ipl: ; IPL
    22 0000005A FA                             cli                          ; disable interruption
    23                                  
    24 0000005B B80000                  			 mov ax, 0x0000
    25 0000005E 8ED8                    			 mov ds, ax
    26 00000060 8EC0                    			 mov es, ax
    27 00000062 8ED0                    			 mov ss, ax
    28 00000064 BC007C                  			 mov sp, BOOT_LOAD
    29                                  
    30 00000067 FB                      			 sti                          ; enable inerruption
    31                                  
    32 00000068 8816[B800]                     mov [BOOT + drive.no], dl    ; store boot drive
    33                                  
    34                                  
    35                                  ;*********************************************************
    36                                  ;               display string
    37                                  ;*********************************************************
    38 0000006C 68[9900]E84E0083C4-            cdecl puts, .s0
    38 00000074 02                 
    39                                  
    40                                  
    41                                  ;*********************************************************
    42                                  ;               load next 512 bytes
    43                                  ;               Sector load: AH = 0x02, INT = 0x13
    44                                  ;*********************************************************
    45 00000075 BB0F00                           mov bx, BOOT_SECT -1            ; number of boot sectors left
    46 00000078 B9007E                  				 mov cx, BOOT_LOAD + SECT_SIZE   ; next address to load
    47                                  
    48 0000007B 515368[B800]E89B00-     				 cdecl read_chs, BOOT, bx, cx
    48 00000083 83C406             
    49                                  
    50 00000086 39D8                             cmp ax, bx                      ; if(AX != BX) // AH = status code(0 if success), AL = number of sectors loaded, BX = number of sectors left to load for boot program
    51 00000088 740C                    .10Q:    jz .10E
    52 0000008A 68[A600]E8300083C4-     .10T:    cdecl puts, .e0
    52 00000092 02                 
    53 00000093 E84900                  				 call reboot
    54                                  .10E:
    55                                  
    56 00000096 E96701                  				 jmp stage_2
    57                                  
    58                                  
    59                                  ;*********************************************************
    60                                  ;               data
    61                                  ;*********************************************************
    62 00000099 426F6F74696E672E2E-     .s0    db "Booting...", 0x0A, 0x0D, 0    ; 0x0A = LF, 0x0D = CR
    62 000000A2 2E0A0D00           
    63 000000A6 4572726F723A736563-     .e0    db "Error:sector read", 0
    63 000000AF 746F72207265616400 
    64                                  
    65                                  ALIGN 2, db 0
    66                                  BOOT:                      ; info related to boot drive
    67                                    istruc drive
    68 000000B8 0000                    	  at drive.no,   dw 0    ; drive number
    69 000000BA 0000                    	  at drive.cyln, dw 0    ; cylinder number
    70 000000BC 0000                    	  at drive.head, dw 0    ; head number
    71 000000BE 0200                    	  at drive.sect, dw 2    ; sector number
    72                                    iend
    73                                  
    74                                  
    75                                  ;*********************************************************
    76                                  ;               modules
    77                                  ;*********************************************************
    78                                  %include "../modules/real/puts.s"
     1                              <1> ; void puts(str); str -> address of string. 0x00 is the end of a string
     2                              <1> 
     3                              <1> puts:
     4                              <1>     ; stackframe
     5                              <1> 											; 4 -> str
     6                              <1> 											; 2 -> IP
     7 000000C0 55                  <1> 			push bp         ; 0
     8 000000C1 89E5                <1> 			mov bp, sp
     9                              <1> 
    10                              <1> 		; store registers
    11 000000C3 50                  <1> 			push ax
    12 000000C4 53                  <1> 			push bx
    13 000000C5 56                  <1> 			push si
    14                              <1> 
    15                              <1> 		; get arg
    16 000000C6 8B7604              <1> 		  mov si, [bp + 4]
    17                              <1> 
    18                              <1>     ; start function
    19 000000C9 B40E                <1> 			mov ah, 0x0E            ; tele type 1 charactor output
    20 000000CB BB0000              <1> 			mov bx, 0x0000          ; page number & color
    21                              <1> 
    22 000000CE FC                  <1> 			cld                     ; DF = 0; increment address
    23                              <1> 
    24                              <1> .10L:
    25 000000CF AC                  <1>       lodsb                  ; AL = [SI]; SI += 1(byte)
    26                              <1> 
    27 000000D0 3C00                <1>       cmp al, 0
    28 000000D2 7404                <1> 			je .10E
    29                              <1> 
    30 000000D4 CD10                <1> 			int 0x10                ; video BIOS call
    31 000000D6 EBF7                <1> 			jmp .10L
    32                              <1> 
    33                              <1> .10E:
    34                              <1>     ; return regisgters
    35 000000D8 5E                  <1> 		  pop si
    36 000000D9 5B                  <1> 		  pop bx
    37 000000DA 58                  <1> 			pop ax
    38                              <1> 
    39                              <1> 		; discard stackframe
    40 000000DB 89EC                <1> 		  mov sp, bp
    41 000000DD 5D                  <1> 			pop bp
    42                              <1> 
    43 000000DE C3                  <1> 			ret
    44                              <1> 
    45                              <1> 
    79                                  %include "../modules/real/reboot.s"
     1                              <1> reboot:
     2 000000DF 68[FB00]E8DBFF83C4- <1>          cdecl puts, .s0
     2 000000E7 02                  <1>
     3                              <1> 
     4                              <1> 
     5                              <1> ;*********************************************************
     6                              <1> ;               wait for input
     7                              <1> ;*********************************************************
     8 000000E8 B410                <1> .10L:    mov ah, 0x10     ; input : AH = 0x10, INT 0x16 -> AL = input
     9 000000EA CD16                <1>          int 0x16
    10                              <1> 
    11 000000EC 3C20                <1> 				 cmp al, ' '       ; ZF == 0;
    12 000000EE 75F8                <1> 				 jne .10L         ; while(!ZF);
    13                              <1> 
    14 000000F0 68[1901]E8CAFF83C4- <1> 				 cdecl puts, .s1
    14 000000F8 02                  <1>
    15                              <1> 
    16                              <1> 
    17                              <1> ;*********************************************************
    18                              <1> ;               reboot
    19                              <1> ;*********************************************************
    20 000000F9 CD19                <1> 				 int 0x19         ; BIOS(0x19) -> reboot
    21                              <1> 
    22 000000FB 0A0D50757368205350- <1> .s0 db 0x0A, 0x0D, "Push SPACE key to reboot...", 0
    22 00000104 414345206B65792074- <1>
    22 0000010D 6F207265626F6F742E- <1>
    22 00000116 2E2E00              <1>
    23 00000119 0A0D0A0D00          <1> .s1 db 0x0A, 0x0D, 0x0A, 0x0D, 0
    80                                  %include "../modules/real/read_chs.s"
     1                              <1> ; read_chs(drive, sect, dst);
     2                              <1> ;          drive   address of struc drive
     3                              <1> ;          sect    number of sectors to read
     4                              <1> ;          dst     address to put what's read
     5                              <1> 
     6                              <1> read_chs:
     7                              <1> ;*********************************************************
     8                              <1> ;                 stackframe
     9                              <1> ;*********************************************************
    10                              <1>                                     ;  8 -> dst
    11                              <1>                                     ;  6 -> sect
    12                              <1>                                     ;  4 -> parameter buffer; what's that?
    13                              <1>                                     ;  2 -> IP
    14 0000011E 55                  <1>        push bp
    15 0000011F 89E5                <1> 			 mov bp, sp
    16                              <1> 
    17 00000121 6A03                <1> 			 push 3                       ; retry = 3
    18 00000123 6A00                <1> 			 push 0                       ; sector count = 0
    19                              <1> 
    20                              <1> 
    21                              <1> ;*********************************************************
    22                              <1> ;                 store registers
    23                              <1> ;*********************************************************
    24 00000125 53                  <1>        push bx
    25 00000126 51                  <1> 			 push cx
    26 00000127 52                  <1> 			 push dx
    27 00000128 06                  <1> 			 push es
    28 00000129 56                  <1> 			 push si
    29                              <1> 
    30                              <1> 
    31                              <1> ;*********************************************************
    32                              <1> ;                 start function
    33                              <1> ;*********************************************************
    34 0000012A 8B7604              <1>        mov si, [bp + 4]             ; SI = parameter buffer; what's that?
    35                              <1> 
    36                              <1> 
    37                              <1> ;*********************************************************
    38                              <1> ;                 configurate CX(optimize for BIOS call)
    39                              <1> ;*********************************************************
    40 0000012D 8A6C02              <1>        mov ch, [si + drive.cyln + 0]      ; CH = cylinder number(bottom byte); why + 0?
    41 00000130 8A4C03              <1>        mov cl, [si + drive.cyln + 1]      ; CH = cylinder number(upper byte); why + 1?
    42 00000133 C0E106              <1> 			 shl cl, 6                          ; CL <<= 6; shift to leftest 2 bits so that sector number can use the rest of 6
    43 00000136 0A4C06              <1> 			 or cl, [si + drive.sect]           ; CL |= sector number; using "or" not to lose 2bits which is already there
    44                              <1> 
    45                              <1> 
    46                              <1> ;*********************************************************
    47                              <1> ;                 read sector
    48                              <1> ;                 Sector load: AH = 0x02, INT = 0x13
    49                              <1> ;                 output: CF = 0,1; success or failure
    50                              <1> ;                         AH = status code
    51                              <1> ;                         AL = number of sectors read
    52                              <1> ;*********************************************************
    53 00000139 8A7404              <1>        mov dh, [si + drive.head]          ; DH = head number
    54 0000013C 8A14                <1> 			 mov dl, [si + 0]                   ; DL = drive number; why not drive.no?
    55 0000013E B80000              <1> 			 mov ax, 0x0000
    56 00000141 8EC0                <1> 			 mov es, ax                         ; ES = 0x000; not sure why this is set as ES is referred by DI
    57 00000143 8B5E08              <1> 			 mov bx, [bp + 8]                   ; BX = dst; offset
    58                              <1> 
    59                              <1> .10L:                                     ; do {
    60 00000146 B402                <1>        mov ah, 0x02                       ; BIOS call for sector load: AH = 0x02, INT = 0x13
    61 00000148 8A4606              <1> 		   mov al, [bp + 6]                   ; number of sectors to read
    62                              <1> 
    63 0000014B CD13                <1> 			 int 0x13                           ; BIOS call for sector load: AH = 0x02, INT = 0x13
    64 0000014D 7304                <1> 		   jnc .11E                           ; if(CF) { // CF = BIOS(0x13, 0x02) success(0) or not(1)
    65                              <1> 
    66 0000014F B000                <1> 			 mov al, 0                          ;   reset AL; AL = sectors to read
    67 00000151 EB0C                <1> 			 jmp .10E                           ;   break; // don't retry if CF == 1
    68                              <1> 			                                    ; }
    69                              <1> .11E:
    70 00000153 3C00                <1>        cmp al, 0                          ; if (a sector was read) {
    71 00000155 7508                <1> 			 jne .10E                           ;   break;
    72                              <1>                                           ; }
    73 00000157 B80000              <1> 			 mov ax,0                           ; ret = 0; set return value. AH = status code, AL = sectors read
    74 0000015A FF4FFE              <1> 			 dec word [bx - 2]                  ; retry--;
    75 0000015D 75E7                <1> 			 jnz .10L                           ; } while(retry);
    76                              <1> .10E:
    77 0000015F B400                <1>        mov ah, 0                           ; reset status code
    78                              <1> 
    79                              <1> 
    80                              <1> ;*********************************************************
    81                              <1> ;                 return registers
    82                              <1> ;*********************************************************
    83 00000161 5E                  <1>        pop si
    84 00000162 07                  <1> 			 pop es
    85 00000163 5A                  <1> 			 pop dx
    86 00000164 59                  <1> 			 pop cx
    87 00000165 5B                  <1> 			 pop bx
    88                              <1> 
    89                              <1> 
    90                              <1> ;*********************************************************
    91                              <1> ;                 discard stackframe
    92                              <1> ;*********************************************************
    93 00000166 89EC                <1>        mov sp, bp
    94 00000168 5D                  <1> 			 pop bp
    95 00000169 C3                  <1> 			 ret
    81                                  
    82                                  
    83                                  ;*********************************************************
    84                                  ;               boot flag(first 512 byte)
    85                                  ;*********************************************************
    86 0000016A 00<rept>                       times 510 - ($ - $$) db 0x00
    87 000001FE 55AA                           db 0x55, 0xAA
    88                                  
    89                                  
    90                                  ;*********************************************************
    91                                  ;               2nd stage of boot job
    92                                  ;*********************************************************
    93 00000200 68[0B02]E8BAFE83C4-     stage_2: cdecl puts, .s0
    93 00000208 02                 
    94                                  
    95 00000209 EBFE                             jmp $              ; end of procedure
    96                                  
    97 0000020B 326E64205374616765-     .s0 db "2nd Stage..", 0x0A, 0x0D, 0
    97 00000214 2E2E0A0D00         
    98                                  
    99                                  
   100                                  ;*********************************************************
   101                                  ;               padding to make this program 8,000 bytes
   102                                  ;*********************************************************
   103 00000219 00<rept>                         times BOOT_SIZE - ($ - $$) db 0
